package 생명체.생존자;

import 생명체.생명체;
import 생명체.좀비.좀비;
import 생명체.좀비.짜장면좀비;
import 스레드.button;
import 스레드.음악.전투퍽;
import 아이템.부품.부품;


public class 생존자 extends 생명체 {


    // 필드
    좀비 좀비값;
    짜장면좀비 짜좀;
    생존자 생존자값;
    전투퍽 퍽;
    button bt;
    부품 부품;

    public int 소지골드;
    public int 무찌른좀비수;
    public double 공격성공률 = 0.8;


    // 생성자
    public 생존자() {    // 디폴트생성자 직접 추가
        super();

        //세팅값은 main메소드의 while 앞에 넣기. 다시 초기화되버리니까.
        this.레벨 = 레벨;
        this.무찌른좀비수 = 무찌른좀비수;
        this.공격력 = 공격력;
        this.남은체력 = 남은체력;
        this.기존체력 = 기존체력;
        this.소지골드 = 소지골드;

    }

    public 생존자(String 이름, String 상대이름, int 레벨, int 공격력, int 남은체력, int 기존체력, int 데미지, int 소지골드, int 무찌른좀비수,
               int 경험치) {
        super(이름, 상대이름, 레벨, 공격력, 남은체력, 기존체력, 데미지, 경험치);

        // 상속 외 추가
        this.소지골드 = 소지골드;
        this.무찌른좀비수 = 무찌른좀비수;

    }


    // 메소드
    public void 반갑습니다(String 이름) {

        System.out.println("\n반갑습니다 [ " + 이름 + " ] 님.");

    }

    public void 스탯창(String 이름) {

        if (남은체력 > 기존체력) {  //기존체력 넘는 문제해결
            남은체력 = 기존체력;
        }

        System.out.println("╔════════════════════════════════════════════════════════════════════════╗");
        System.out.println("                         [ " + 이름 + " ] 님의 상태창                           ");
        System.out.println("   Lv." + 레벨 + "   무찌른좀비수:" + 무찌른좀비수 + "   공격력:" + 공격력 + "   남은체력:" + 남은체력 + "/" + 기존체력 + "   소지골드:" + 소지골드);
        System.out.println("╚════════════════════════════════════════════════════════════════════════╝");

    }


    //-----------------------------전투---------------------------------
    //-----------------------------전투---------------------------------

    public void 공격() {

        System.out.println("\n\n\n\n\n\n");
        System.out.println("o==[]:::::::::::::::>\n");

        System.out.println("[ " + 이름 + " ]의 일반 공격\n");

        System.out.println("o==[]:::::::::::::::>\n");

        try {
            Thread.sleep(300);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }  //좀비맞는게 순식간에 지나가서 0.3초만 재움


/*
        System.out.println("좀비의 남은체력 : " + 좀비.남은체력);
*/


    }

    public void 공격_결과(좀비 좀, 전투퍽 퍽, button bt, 짜장면좀비 짜좀, 생존자 생) {



        //공격성공 : 60%
        if (Math.random() <= 공격성공률) {  //무조건 공격하니까 1번만 치면 되는 게임이 되버림 --> 밸런스맞춤


            if (Math.random() <= 0.5) {  // 크리티컬 데미지) 공격시 50퍼의 확률로 크리티컬 데미지가 뜬다. 공격력 1.5배

                생.공격력 = 생.공격력 * 15 / 10;  //데이터타입을 double로 바꾸래서 그냥 1.5를 저렇게 바꿈

                if (bt.아이템공격 == 1||bt.아이템공격 == 2||bt.아이템공격 == 3) {  //아이템변신 쓰는경우 일반공격 이미지가 나와서 안 나오게 하고싶음
                    //nothing
                } else {
                    공격();  // >>>공격(이미지만)
                }

                System.out.println("\n\n\n\n\n\n\n\n" +
                        "                                         크리티컬 데미지!\n\n\n\n\n\n\n\n\n\n");

                try {
                    Thread.sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("생 공격력 : " + 생.공격력);  //발표 때 없애기

            } else {

                if (bt.아이템공격 == 1||bt.아이템공격 == 2||bt.아이템공격 == 3) {  //아이템변신 쓰는경우 일반공격 이미지가 나와서 안 나오게 하고싶음
                    //nothing
                } else {
                    공격();  // >>>공격(이미지만)
                }

                System.out.println("\n\n\n\n\n\n\n\n" +
                        "                                           공격 성공!\n\n\n\n\n\n\n\n\n\n");
                try {
                    Thread.sleep(300);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                System.out.println("생 공격력 : " + 생.공격력);  //발표 때 없애기

            }

            좀.남은체력 = 좀.맞기(공격력);
            좀.맞기_결과(생);  //우어억(멘트)
            생.공격력 = bt.생공격력초기화;  //lose하고 돌아가니까 공격력이 크리티컬 공격력으로 마을 돌아가서 다시 회복시킴
            퍽.run();







            //공격실패 : 40%
        } else {

/*
            bt.공격실패 = true;  //공격실패시 이모션 안 나오게하고싶어
*/

            //오좀
            if (bt.사냥123 == 1) {

                System.out.println("\n\n\n\n\n\n\n\n" +
                        "                                           공격 실패!\n\n\n\n\n\n\n\n\n\n");

            //짜좀
            } else if (bt.사냥123 == 2) {

                System.out.println("\n\n\n\n\n\n\n\n" +
                        "                                           공격 실패!\n\n\n\n\n\n\n\n\n\n");

                짜좀.짜장살점공격(생, bt);   //짜장면좀비일 경우 맞지 않고 튕겨내서 공격함.

            //먹좀
            } else if (bt.사냥123 == 3) {

                System.out.println("\n\n\n\n\n\n\n\n" +
                        "                                           공격 실패!\n\n\n\n\n\n\n\n\n\n");
                //채워야되나?
            }

        }
    }





    public int 체력(좀비 좀비) {
        return 좀비.체력(공격력);
    }


    public void 공격_결과_사망(좀비 좀비) {
/*
        좀비.사망(공격력);
*/
/*
        System.out.println("좀비 남은체력 : "+좀비.남은체력);
*/
        /*System.out.println("좀비의 남은체력 : " + 좀비.맞기(공격력));*/

    }


    public int 맞기(int 공격력) {

        return 남은체력 - 공격력;
    }


    public void 맞기_결과(좀비 좀비) {

        System.out.println("╔══════════════════════════╗");
        System.out.println("           [ " + 이름 + " ] \n");
        System.out.println("     ╭ ◜◝ ͡ ◜◝ ͡ ◜◝ ͡ ╮\n" +
                            "           윽...!\n" +
                            "..O°°╰ ◟◞ ͜ ◟◞ ͜ ◟◞ ͜ ╯\n");
        System.out.println("     -" + 좀비.공격력 + "의 데미지.");
        System.out.println("     남은 체력 : " + 남은체력 + "/" + 기존체력);
        System.out.println("╚══════════════════════════╝\n");
        System.out.println("1.공격  2.변신 공격  3.회복약\n\n\n");

/*
        System.out.println("1.공격  2.아이템 공격 (맞기결과)");
*/
    }




    //----------------------------- 아이템 공격 ---------------------------------

    public int 공격3배(int 공격력) {

        return 공격력 * 3;
    }

    public int 공격3배복구(int 공격력) {

        return 공격력 / 3;
    }

    public void 일반공격복구() {

        공격력 = 공격3배복구(공격력);

    }


    public void 아이템공격(좀비 좀비) {

        공격력 = 공격3배(공격력);

        System.out.println("생존자의 공격력 : " + 공격력);

        System.out.println("o==[]::::::::::::::::::>\n");

        System.out.println("[ " + 이름 + " ]의 아이템 공격\n");

        System.out.println("o==[]::::::::::::::::::>\n");


        System.out.println("좀비의 남은체력 : " + 좀비.맞기(공격력));


    }



    //----------------------- 사망 or 승리-------------------

    public void 패배lose() {
        System.out.println( "\n╔═════════════════════════════════════════════════════════════════════════════════╗\n\n" +
                            "");
                    System.out.println("" +
                            "                        ██╗      ██████╗ ███████╗███████╗\n" +
                            "                        ██║     ██╔═══██╗██╔════╝██╔════╝\n" +
                            "                        ██║     ██║   ██║███████╗█████╗  \n" +
                            "                        ██║     ██║   ██║╚════██║██╔══╝  \n" +
                            "                        ███████╗╚██████╔╝███████║███████╗\n" +
                            "                        ╚══════╝ ╚═════╝ ╚══════╝╚══════╝\n" +
                            "");
        System.out.println("╚═════════════════════════════════════════════════════════════════════════════════╝");
        System.out.println("마을로 돌아가시려면 '44'를 입력하세요.");
        System.out.println("게임을 완전히 종료하시려면 '00'을 입력하세요.");


/*
        System.out.println("1계속 하시려면 1번, 게임을 종료하시려면 0번을 누르세요.");
*/



    }


    public void 승리win(){


        System.out.println( "╔═════════════════════════════════════════════════════════════════════════════════╗\n\n" +

                            "                             ██╗    ██╗██╗███╗   ██╗\n" +
                            "                             ██║    ██║██║████╗  ██║\n" +
                            "                             ██║ █╗ ██║██║██╔██╗ ██║\n" +
                            "                             ██║███╗██║██║██║╚██╗██║\n" +
                            "                             ╚███╔███╔╝██║██║ ╚████║\n" +
                            "                              ╚══╝╚══╝ ╚═╝╚═╝  ╚═══╝\n\n" +
                            "╚═════════════════════════════════════════════════════════════════════════════════╝");

    }


    public void 전투fight() {
        System.out.println( "╔═════════════════════════════════════════════════════════════════════════════════╗\n\n");
        System.out.println( "" +
                            "                       ███████╗██╗ ██████╗ ██╗  ██╗████████╗\n" +
                            "                       ██╔════╝██║██╔════╝ ██║  ██║╚══██╔══╝\n" +
                            "                       █████╗  ██║██║  ███╗███████║   ██║   \n" +
                            "                       ██╔══╝  ██║██║   ██║██╔══██║   ██║   \n" +
                            "                       ██║     ██║╚██████╔╝██║  ██║   ██║   \n" +
                            "                       ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝   ╚═╝ \n");
        System.out.println("╚═════════════════════════════════════════════════════════════════════════════════╝");

    }



    // ------------------- 보상 ---------------------------------------------
    // ------------------- 보상 ---------------------------------------------

    public void 보상_골드(좀비 좀비) {

        좀비.보상_골드(소지골드);
        소지골드 = 좀비.보상_골드(소지골드);
    }

    public void 보상_경험치(좀비 좀비) {

        좀비.보상_경험치(경험치);
        경험치 = 좀비.보상_경험치(경험치);
    }

    public void 보상_무찌른좀비수(좀비 좀비) {

        좀비.좀비보상_무찌른좀비수(무찌른좀비수);
        무찌른좀비수 = 좀비.좀비보상_무찌른좀비수(무찌른좀비수);
    }


    // 최종
    public void 보상한번에(좀비 좀비, button bt, 생존자 생) {

/*
        공격_결과_사망(좀비);
*/
        보상_골드(좀비);
        보상_경험치(좀비);
        보상_무찌른좀비수(좀비);
        레벨업(좀비, bt, 생);
    }


    // ------------------------ 전당포 ----------------------------


/*    //--------------- 구매 -----------------------------
    public void 소지금감소(부품 부품) {

        부품.소지금감소(소지골드);
        소지골드 = 부품.소지금감소(소지골드);
    }


    // 부품 갯수 1씩 증가
    public void 갯수증가(부품 부품) {

        부품.갯수 = 부품.아이템1증가(부품.갯수);
    }


    public void 구매_선택(부품 부품) {

        if (부품.가격 > 소지골드) {
            System.out.println("\n\n소지골드가 부족합니다.");
        } else {

            System.out.println("\n\n                        [" + 부품.품명 + "] 를 구매했습니다.");
            System.out.println("                        - " + 부품.가격 + "골드 차감됩니다.\n\n\n\n");
            소지금감소(부품);
            갯수증가(부품);

        }
    }*/


    //--------------- 판매 -----------------------------

/*
    public void 판매_선택(부품 부품) {

        if (부품.갯수 <= 0) {

            System.out.println("\n\n판매할 부품이 부족합니다.");

        } else {

            System.out.println("\n\n" + 부품.품명 + "를 구매했습니다.");
            System.out.println("내 쌈짓돈에서 -" + 부품.가격 + "골드 차감됩니다.\n");
            소지금증가(부품);
            갯수감소(부품);

        }
    }

    public void 소지금증가(부품 부품) {

        부품.소지금증가(소지골드);
        소지골드 = 부품.소지금증가(소지골드);
    }


    // 부품 갯수 1씩 증가
    public void 갯수감소(부품 부품) {

        부품.갯수 = 부품.아이템1감소(부품.갯수);
    }*/


    // ---------------------------- 소지금 -------------------------------------
    // 현재 소지금
    public void 소지골드(int 소지골드) {


        System.out.println("                                                        ╔══════════════════════╗\n" +
                "                                                                현재 소지금      \n" +
                "                                                                " + 소지골드 + "골드\n" +
                "                                                        ╚══════════════════════╝");
    }


    // 현재 소지금
    public void 소지골드_왼쪽(int 소지골드) {


        System.out.println(
                        "     ╔══════════════════════╗\n" +
                        "             현재 소지금      \n" +
                        "             " + 소지골드 + "골드\n" +
                        "     ╚══════════════════════╝");
    }

    //--------------------------------- 레벨업 ---------------------------------------------------

    //레벨업 출력 : 1000마다 1레벨업
    public void 레벨업(좀비 좀비, button bt, 생존자 생) {

        for (int 경험 = 0; 경험 <= 10000; 경험 += 1000) {

            if (경험치 >= 경험 && 경험치 + 좀비.경험치 <= 경험 + 1000) {

                int 레벨오름 = 레벨업(레벨);
                레벨 = 레벨오름;


                System.out.println("                                                    ╔═════════════════════════════╗");
                System.out.println("                                                                레벨 업!\n");

                System.out.println("                                                           현재 레벨 : " + 레벨 + "\n" +
                                   "                                                           현재 경험치 : " + 경험치 + "\n");

                System.out.println("                                                    ╚═════════════════════════════╝\n");

                bt.생공격력초기화 = bt.생공격력초기화 + bt.레벨업공격력업;  //80+20
                생.기존체력 = 생.기존체력 + bt.레벨업피통업; //1500+200
                System.out.println("생존자공격력 : " + bt.생공격력초기화);
            }

        } //~for




    }//~메소드







}//~class



