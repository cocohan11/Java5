
/*
public class 게임플레이 {


    public static void main(String[] args) {



        System.out.println( "\n\n" +

                "╔══════════════════╗\n\n" +

                "    내가 먹은 좀비\n" +
                "     GAME START\n\n" +

                "╚══════════════════╝"
        );


        System.out.println(
                "\n\n" +
                "20xx년도 한국, 좀비바이러스가 창궐했습니다.\n\n" +
                "좀비를 피해 탈출하십시오. \n\n" +
                "통신기계를 만들면 UN군이 와줄지도 모르겠네요..\n\n" +
                "그럼 행운을 빕니다.\n\n");
        System.out.print("\n당신의 이름을 말씀해주세요 : ");

        Scanner 입력값 = new Scanner(System.in);

        String 당신이름 = 입력값.nextLine();      //입력값받음

        System.out.println("\n반갑습니다 [ "+당신이름+" ] 님.\n");
        // 반갑습니다 ㅇㅇㅇ님.~




        //----------------------------- import된 세팅값 ---------------------------------------------------

        통신장치부품1 부품1 = new 통신장치부품1("1. 통신장치부품1 : 배터리",20000,1);
        통신장치부품2 부품2 = new 통신장치부품2("2. 통신장치부품2 : 낡은 라디오", 50000, 0);
        통신장치부품3 부품3 = new 통신장치부품3("3. 통신장치부품3 : 마이크", 80000, 0);
        부품제조티켓 티켓 = new 부품제조티켓("부품제조티켓", 0, 1);
        생존자 생존자설정값 = new 생존자(
                "","",1,300,
                1500,1500,
                0,140000,0,0);
        좀비 오렌지좀비값 = new 좀비(
                "오렌지좀비", 당신이름,"오렌지맛 산성 뱉기","카악 퉤~~!!!",1,130,
                1800,1800, 생존자설정값.공격력,8000, 600);
        좀비 짜장면좀비값 = new 좀비(
                "짜장면좀비", 당신이름,"면발로 때리기","후루루룩~~!!",3,180,
                1000,1000,
                생존자설정값.공격력,8000, 700);
        좀비 먹물파스타좀비값 = new 좀비(
                "먹물파스타좀비", 당신이름,"눈에 먹물 뿌리기","먹물 받아랏. 찍~~!!",
                1,240,
                1300,1300,
                생존자설정값.공격력,8000, 800);
        좀비 좀비값 = new 좀비();
        생명체 생명체값 = new 생명체();
        아이템 아이템들 = new 아이템();
        살점 오렌지살점 = new 살점("4.오렌지좀비의 살점(스킬)", 0, 1);
        살점 짜장면살점 = new 살점("5.짜장면좀비의 살점(스킬)", 0, 1);
        살점 먹물살점 = new 살점("6.먹물파스타좀비의 살점(스킬)", 0, 1);





        //---------------------------------------------------------------------------------------


        System.out.println("[ "+당신이름+" ] 님의 안전지대로 이동합니다...\n\n\n\n\n");


        //------------------------------안전지대---------------------------------------------------

        //상태창
        생존자설정값.스탯창(당신이름);
        System.out.println("1.사냥\n2.상태창\n3.상점\n4.인벤토리\n5.퀘스트\n");


        // 지옥의 반복문 안에서 계속 도는 형태로 만들거야. 탈출 안 시키겠네.
        // 반복시킬 때 내 상태 리셋되는건 아니겠지?
        while (true) {

            int 당신의선택 = 입력값.nextInt();   //값받음


            // 1.사냥 선택
            if (당신의선택 == 1) {


                System.out.println("사냥하러갑니다. 난이도를 선택해주세요.\n");
                System.out.println("1. 15미터 앞 편의점\n" +
                                   "2. 50미터 앞 철물점\n" +
                                   "3. 200미터 앞 학교");

                // 123이외입력시 입력 다시 할 수 있게 반복
                while (true) {

                    int 당신의선택_사냥123 = 입력값.nextInt();

                    if (당신의선택_사냥123 == 1) {
                        System.out.println("15미터 앞 편의점으로 갑니다...");
                        System.out.println("(뒤적뒤적)");
                        System.out.println("어디 쓸만한게 있나.........\n");

                        System.out.println("╔═════════════════════════════╗\n"+
                                "       (̮̮̃•̮̮̃̃•̃)..\n" +
                                "       /█l \n" +
                                "       / L\n");

                        System.out.println("   "+오렌지좀비값.이름+"가 나타났다!");
                        좀비값.좀비스펙(오렌지좀비값.레벨);

                        System.out.println("╚═════════════════════════════╝\n");

                        System.out.println("1.공격  2.스킬");


                        //반복문 들어가기 전에 입장하자마자 좀비값 초기화
                        오렌지좀비값 = new 좀비(
                                "오렌지좀비", 당신이름,"오렌지맛 산성 뱉기","카악 퉤~~!!!",1,1300,
                                1800,1800, 생존자설정값.공격력,8000, 600);

                        while (true) {

                            int 사냥 = 입력값.nextInt();



                            // ------------------------------- 1.일반공격 -----------------------------------
                            if (사냥 == 1) {

                                // 생->좀 공격 메소드
                                int 공격결과to좀 = 생명체값.공격하기(당신이름, 생존자설정값.공격력, 오렌지좀비값.남은체력);
                                오렌지좀비값.남은체력 = 공격결과to좀;     // 공격 후 감소된 좀비 체력값 넣기


                                // 생->좀 맞기 메소드
                                if (오렌지좀비값.남은체력 > 0) {

                                    생명체값.맞기(오렌지좀비값.이름, 생존자설정값.공격력, 오렌지좀비값.남은체력, 오렌지좀비값.기존체력);

                                    String 엔터 = 입력값.nextLine();  //엔터로 넘기기
                                    입력값.nextLine();  //엔터로 넘기기

                                    System.out.println("이제 좀비의 반격");
                                    입력값.nextLine();  //엔터로 넘기기

                                } else if (오렌지좀비값.남은체력 <= 0) {



                                    //보상 메소드 : 골드,뼈,경험치(살점(:스킬사용)은 아직 미완성)
                                    int 골드줌 = 좀비값.좀비보상_골드(생존자설정값.소지골드, 오렌지좀비값.드랍골드);
                                    생존자설정값.소지골드 = 골드줌;

                                    int 경험치줌 = 좀비값.좀비보상_경험치(생존자설정값.경험치, 오렌지좀비값.경험치);
                                    생존자설정값.경험치 = 경험치줌;

                                    int 뼈줌 = 좀비값.좀비보상_뼈(티켓.갯수);
                                    티켓.갯수 = 뼈줌;

                                    int 살점줌 = 좀비값.좀비보상_살점(오렌지살점.갯수);
                                    오렌지살점.갯수 = 살점줌;

                                    int 좀비수증가 = 좀비값.좀비보상_무찌른좀비수(생존자설정값.무찌른좀비수);
                                    생존자설정값.무찌른좀비수 = 좀비수증가;


                                    //보상 출력
                                    좀비값.좀비사망(오렌지좀비값.이름, 생존자설정값.공격력,
                                            오렌지좀비값.기존체력, 오렌지좀비값.드랍골드, 오렌지좀비값.경험치);


                                    //레벨업 출력 : 1000마다 1레벨업
                                    for (int 경험치=0; 경험치<=10000; 경험치+=1000){

                                        if (생존자설정값.경험치 >= 경험치 && 생존자설정값.경험치 + 오렌지좀비값.경험치 <= 경험치+1000) {

                                            int 레벨오름 = 생존자설정값.레벨업(생존자설정값.레벨);
                                            생존자설정값.레벨 = 레벨오름;

                                            System.out.println( "                          ╔═══════════════════╗");
                                            System.out.println( "                                 레벨 UP！\n\n" +

                                                    "                             　 　 ∧ ∧\n" +
                                                    "　                            　　(´･ω･ ∩　\n" +
                                                    "　                           　　o.　　 ,ﾉ.\n" +
                                                    "　                            　　Ｏ＿ .ﾉ\n" +
                                                    "　                            　 　 　 (ノ\n" +
                                                    "　 　                            　　i｜|\n" +
                                                    "　　　                           　 ━━\n");
                                            System.out.println( "　　　                        현재 경험치 : "+생존자설정값.경험치);
                                            System.out.println( "                          ╚═══════════════════╝\n");


                                        }

                                    }


                                    //승리의춤
                                    생명체값.승리의춤();


                                    break;  //탈출_12345로

                                }

                                //좀->생 공격메소드
                                int 공격결과to생 = 생명체값.공격하기_왼쪽(오렌지좀비값.이름, 오렌지좀비값.공격력, 생존자설정값.남은체력);
                                생존자설정값.남은체력 = 공격결과to생;
                                입력값.nextLine();  //엔터로 넘기기


                                //생존자가 체력 0이하인 경우
                                if (생존자설정값.남은체력 <= 0) {

                                    System.out.println( "╔════════════════════════╗\n\n" +
                                                        "           사 망           \n");
                                    System.out.println( "    ╭┈┈┈┈╯       ╰┈┈┈╮\n" +
                                                        "    \n" +
                                                        "       ╰┳┳╯    ╰┳┳╯\n" +
                                                        "    \n" +
                                                        "         N    　　 N\n" +
                                                        "    \n" +
                                                        "        ○     　　 ○\n" +
                                                        "           ╰┈┈╯\n" +
                                                        "         O ╭━━━━╮　 O\n" +
                                                        "            ┈┈┈┈\n" +
                                                        "       　　o      　　 o");
                                    System.out.println( "╚════════════════════════╝\n");

                                    System.out.println("계속 하시려면 1번, 게임을 종료하시려면 0번을 누르세요.");
                                    int 게임종료 = 입력값.nextInt();

                                    if (게임종료 == 1) {
                                        break;
                                        // 반복문 계속
                                    } else if (게임종료 == 0) {
                                        System.out.println("게임을 종료합니다.");
                                        System.exit(0);
                                    }
                                    break;


                                    //생존자 체력 0초과인 경우
                                } else {

                                    //맞기 메소드
                                    생명체값.맞기_왼쪽(당신이름, 오렌지좀비값.공격력, 생존자설정값.남은체력, 생존자설정값.기존체력);

                                }

                                //한 턴 끝남.
                                System.out.println("1.공격  2.스킬");








                            // ------------------------------- 2.스킬공격 ---------------------------------
                            } else if (사냥 == 2) {


                                    //공격력 3배설정
                                    int 스킬사용_살점 = 생명체값.스킬사용(생존자설정값.공격력);
                                    생존자설정값.공격력 = 스킬사용_살점;

                                    // 살점-1개
                                    int 살점갯수씀 = 오렌지살점.살점갯수감소(오렌지살점.갯수);
                                    오렌지살점.갯수 = 살점갯수씀;

                                    //공격시행. 감소된 체력 값 넣기
                                    int 공격결과to좀 = 생명체값.스킬공격(당신이름, 오렌지좀비값.이름, 오렌지좀비값.스킬명, 오렌지좀비값.스킬대사, 생존자설정값.공격력,
                                            오렌지좀비값.남은체력);
                                    오렌지좀비값.남은체력 = 공격결과to좀;


                                // 생->좀 맞기 메소드
                                if (오렌지좀비값.남은체력 > 0) {


                                    생명체값.맞기(오렌지좀비값.이름, 생존자설정값.공격력, 오렌지좀비값.남은체력, 오렌지좀비값.기존체력);

                                    //공격력 1/3배로 원상복귀
                                    int 스킬사용_살점_끝 = 생명체값.스킬사용끝(생존자설정값.공격력);
                                    생존자설정값.공격력 = 스킬사용_살점_끝;

                                    String 엔터 = 입력값.nextLine();  //엔터로 넘기기
                                    입력값.nextLine();  //엔터로 넘기기

                                    System.out.println("이제 좀비의 반격");
                                    입력값.nextLine();  //엔터로 넘기기

                                } else if (오렌지좀비값.남은체력 <= 0) {


                                    //공격력 1/3배로 원상복귀
                                    int 스킬사용_살점_끝 = 생명체값.스킬사용끝(생존자설정값.공격력);
                                    생존자설정값.공격력 = 스킬사용_살점_끝;

                                    //보상 메소드 : 골드,뼈,경험치(살점(:스킬사용)은 아직 미완성)
                                    int 골드줌 = 좀비값.좀비보상_골드(생존자설정값.소지골드, 오렌지좀비값.드랍골드);
                                    생존자설정값.소지골드 = 골드줌;

                                    int 경험치줌 = 좀비값.좀비보상_경험치(생존자설정값.경험치, 오렌지좀비값.경험치);
                                    생존자설정값.경험치 = 경험치줌;

                                    int 뼈줌 = 좀비값.좀비보상_뼈(티켓.갯수);
                                    티켓.갯수 = 뼈줌;

                                    int 살점줌 = 좀비값.좀비보상_살점(오렌지살점.갯수);
                                    오렌지살점.갯수 = 살점줌;

                                    int 좀비수증가 = 좀비값.좀비보상_무찌른좀비수(생존자설정값.무찌른좀비수);
                                    생존자설정값.무찌른좀비수 = 좀비수증가;





                                    //보상 출력
                                    좀비값.좀비사망(오렌지좀비값.이름, 생존자설정값.공격력,
                                            오렌지좀비값.기존체력, 오렌지좀비값.드랍골드, 오렌지좀비값.경험치);



                                    //레벨업 출력 : 1000마다 1레벨업
                                    for (int 경험치=0; 경험치<=10000; 경험치+=1000){

                                        if (생존자설정값.경험치 >= 경험치 && 생존자설정값.경험치 + 오렌지좀비값.경험치 <= 경험치+1000) {

                                            int 레벨오름 = 생존자설정값.레벨업(생존자설정값.레벨);
                                            생존자설정값.레벨 = 레벨오름;

                                            System.out.println( "                          ╔═══════════════════╗");
                                            System.out.println( "                                 레벨 UP！\n\n" +

                                                                "                             　 　 ∧ ∧\n" +
                                                                "　                            　　(´･ω･ ∩　\n" +
                                                                "　                           　　o.　　 ,ﾉ.\n" +
                                                                "　                            　　Ｏ＿ .ﾉ\n" +
                                                                "　                            　 　 　 (ノ\n" +
                                                                "　 　                            　　i｜|\n" +
                                                                "　　　                           　 ━━\n");
                                            System.out.println( "　　　                        현재 경험치 : "+생존자설정값.경험치);
                                            System.out.println( "                          ╚═══════════════════╝\n");


                                        }

                                    }

                                    //승리의춤
                                    생명체값.승리의춤();




                                    break;  //탈출_12345로

                                }

                                //좀->생 공격 메소드
                                int 공격결과to생 = 생명체값.공격하기_왼쪽(오렌지좀비값.이름, 오렌지좀비값.공격력, 생존자설정값.남은체력);
                                생존자설정값.남은체력 = 공격결과to생;
                                입력값.nextLine();  //엔터로 넘기기



                                //생존자가 체력 0이하인 경우
                                if (생존자설정값.남은체력 <= 0) {

                                    System.out.println( "╔════════════════════════╗\n\n" +
                                                        "           사 망           \n");
                                    System.out.println( "    ╭┈┈┈┈╯       ╰┈┈┈╮\n" +
                                                        "    \n" +
                                                        "       ╰┳┳╯    ╰┳┳╯\n" +
                                                        "    \n" +
                                                        "         N    　　 N\n" +
                                                        "    \n" +
                                                        "        ○     　　 ○\n" +
                                                        "           ╰┈┈╯\n" +
                                                        "         O ╭━━━━╮　 O\n" +
                                                        "            ┈┈┈┈\n" +
                                                        "       　　o      　　 o");
                                    System.out.println( "╚════════════════════════╝\n");

                                    System.out.println("계속 하시려면 1번, 게임을 종료하시려면 0번을 누르세요.");
                                    int 게임종료 = 입력값.nextInt();

                                    if (게임종료 == 1) {
                                        break;
                                        // 반복문 계속
                                    } else if (게임종료 == 0) {
                                        System.out.println("게임을 종료합니다.");
                                        System.exit(0);
                                    } break;

                                        //생존자 체력 0초과인 경우
                                } else {

                                    //맞기 메소드
                                    생명체값.맞기_왼쪽(당신이름, 오렌지좀비값.공격력, 생존자설정값.남은체력, 생존자설정값.기존체력);

                                }

                                //한 턴 끝남.
                                System.out.println("1.공격  2.스킬");

                                }// 생 -> 좀 공격끝



                        }  //~while



                        //break;

                        //전투메소드
                        //전투메소드 끝

                    } else if (당신의선택_사냥123 == 2) {
                        System.out.println("50미터 앞 철물점으로 갑니다...");
                        System.out.println("(뒤적뒤적)");
                        System.out.println("어디 쓸만한게 있나.....");
                        System.out.println("저 쪽에서 좀비가 나타났다! 해치우고 무사히 돌아가자.\n");
                        break;


                    } else if (당신의선택_사냥123 == 3) {
                        System.out.println("200미터 앞 학교로 갑니다...");
                        System.out.println("(뒤적뒤적)");
                        System.out.println("부품을 발견했다! 안전지대로 돌아ㄱrㅈ..");
                        System.out.println("저 쪽에서 좀비가 나타났다! 해치우고 무사히 돌아가자.\n");
                        break;

                    //123이외 입력시
                    } else {
                        System.out.println("다시 선택하세요.");
                    }

                    int 사냥종료 = 입력값.nextInt();

                    if (사냥종료 == 0) {
                    }
                    break;  //12345나오게 탈출
                }
            }

            // 2. 상태창
            else if (당신의선택 == 2) {

                생존자설정값.스탯창(당신이름);

            // 3. 상점
            } else if (당신의선택 == 3) {


                while (true) {

                    System.out.println("[ " + 당신이름 + " ] 님이 상점에 입장합니다.");
                    System.out.println("1.구매  2.판매  3.조합하기  0.이전");
                    int 당신의선택_상점123 = 입력값.nextInt();


                    // 1.구매 선택
                    if (당신의선택_상점123 == 1) {

                        while (true) {


                            아이템들.상점_구매(생존자설정값.소지골드);

                            int 당신의선택_상점_구매 = 입력값.nextInt();

                            // 사용자 입력
                            // 아이템 구매 선택
                            // 1:배터리
                            if (당신의선택_상점_구매 == 1) {

                                if (부품1.가격 > 생존자설정값.소지골드) {
                                    System.out.println("소지골드가 부족합니다.");
                                } else {

                                    System.out.println("\n\n\n"+부품1.품명 + "를 구매했습니다.");
                                    System.out.println("-"+부품1.가격+"원\n");

                                    // 부품 갯수 1씩 증가
                                    int 구매결과 = 부품1.아이템1증가(부품1.갯수);
                                    부품1.갯수 = 구매결과;

                                    // 소지금 감소
                                    int 남은돈 = 부품1.소지금감소(생존자설정값.소지골드, 부품1.가격);
                                    생존자설정값.소지골드 = 남은돈;

                                }





                                // 2:통신기구
                            } else if (당신의선택_상점_구매 == 2) {

                                if (부품2.가격 > 생존자설정값.소지골드) {
                                    System.out.println("소지골드가 부족합니다.");
                                } else {
                                    System.out.println(부품2.품명 + "를 구매하였습니다.");
                                    System.out.println("-"+부품2.가격+"원\n");


                                    // 부품 갯수 1씩 증가
                                    int 구매결과 = 부품2.아이템1증가(부품2.갯수);
                                    부품2.갯수 = 구매결과;

                                    // 소지금 감소
                                    int 남은돈 = 부품2.소지금감소(생존자설정값.소지골드, 부품2.가격);
                                    생존자설정값.소지골드 = 남은돈;

                                }


                                // 3:마이크
                            } else if (당신의선택_상점_구매 == 3) {
                                if (부품3.가격 > 생존자설정값.소지골드) {
                                    System.out.println("소지골드가 부족합니다.");
                                } else {
                                    System.out.println(부품3.품명 + "를 구매하였습니다.");
                                    System.out.println("-"+부품3.가격+"원\n");

                                    // 부품 갯수 1씩 증가
                                    int 구매결과 = 부품3.아이템1증가(부품3.갯수);
                                    부품3.갯수 = 구매결과;

                                    // 소지금 감소
                                    int 남은돈 = 부품3.소지금감소(생존자설정값.소지골드, 부품3.가격);
                                    생존자설정값.소지골드 = 남은돈;

                                }
                            } else if (당신의선택_상점_구매 == 0) {
                                System.out.println("*");
                                break;
                            }


                        }  //~while 빠져나오면 부품가격갯수 보여줌
                    }


                    // 2.판매
                    else if (당신의선택_상점123 == 2) {

                        while (true) {


                            //내 인벤토리 진열 쭉하고 판매메소드 이용하여 상점에 판매해서 골드 얻기
                            // 갯수가 1이상일 때만 출력
                            System.out.println("\n=========== 인 벤 토 리 ===========\n");
                            if (부품1.갯수 >= 1) {
                                아이템들.인벤아이템(부품1.품명,부품1.가격, 부품1.갯수);
                            }
                            if (부품2.갯수 >= 1) {
                                아이템들.인벤아이템(부품2.품명,부품2.가격, 부품2.갯수);
                            }
                            if (부품3.갯수 >= 1) {
                                아이템들.인벤아이템(부품3.품명, 부품3.가격, 부품3.갯수);
                            }

                            System.out.println("==================================");
                            System.out.println("╔══════════════════════╗\n" +
                                               "        현재 소지금      \n" +
                                               "         "+생존자설정값.소지골드+"원\n"+
                                               "╚══════════════════════╝");
                            System.out.println("판매할 아이템 번호를 입력하세요 (0.이전)\n\n\n");


                            int 판매 = 입력값.nextInt();  //값입력


                            // 판매 선택 (1이상의 아이템)
                            if (판매 == 1) {

                                // 부품 갯수 1씩 감소
                                int 판매결과 = 부품1.아이템1감소(부품1.갯수);
                                부품1.갯수 = 판매결과;

                                // 소지금 감소
                                int 남은돈 = 부품1.소지금증가(생존자설정값.소지골드, 부품1.가격);
                                생존자설정값.소지골드 = 남은돈;

                                System.out.println(부품1.품명 + "를 판매하였습니다.");
                                System.out.println("+" + 부품1.가격 + "원\n");

                            } else if (판매 == 2) {

                                // 부품 갯수 1씩 감소
                                int 판매결과 = 부품2.아이템1감소(부품2.갯수);
                                부품2.갯수 = 판매결과;

                                // 소지금 감소
                                int 남은돈 = 부품2.소지금증가(생존자설정값.소지골드, 부품2.가격);
                                생존자설정값.소지골드 = 남은돈;

                                System.out.println(부품2.품명 + "를 판매하였습니다.");
                                System.out.println("+" + 부품2.가격 + "원\n");

                            } else if (판매 == 3) {

                                // 부품 갯수 1씩 감소
                                int 판매결과 = 부품3.아이템1감소(부품3.갯수);
                                부품3.갯수 = 판매결과;

                                // 소지금 감소
                                int 남은돈 = 부품3.소지금증가(생존자설정값.소지골드, 부품3.가격);
                                생존자설정값.소지골드 = 남은돈;

                                System.out.println(부품3.품명 + "를 판매하였습니다.");
                                System.out.println("+" + 부품3.가격 + "원\n");

                            }  else if (판매 == 0) {
                                System.out.println("$$");
                                break;

                            }



                        }  //~while








                    // 3. 조합요청
                    } else if (당신의선택_상점123 == 3) {

                        System.out.println("통신장치를 조합해드립니다.");
                        System.out.println("1.Yes  2.No");

                        int 조합 = 입력값.nextInt();  //입력값 : 문자 y or Y

                        if (조합 == 1) {

                            System.out.println("조합중입니다...\n");

                            // 해피엔딩
                            if (부품1.갯수 >= 1 && 부품2.갯수 >= 1 && 부품3.갯수 >= 1) {

                                System.out.println("뚝딱뚝딱");
                                System.out.println("뚝딱뚝딱");
                                System.out.println("뚝딱뚝딱");
                                System.out.println("**********   작동하는 무전기가 제작되었습니다.  **********");
                                System.out.println("**********   작동하는 무전기가 제작되었습니다.  **********");
                                System.out.println("**********   작동하는 무전기가 제작되었습니다.  **********");
                                System.out.println("**********   UN군 Jamie사령과 연락이 닿습니다. **********\n\n\n");
                                System.out.println( "   ▬▬▬.◙.▬▬▬ \n" +
                                                    "   ═▂▄▄▓▄▄▂ \n" +
                                                    "   ◢◤ █▀▀████▄▄▄▄◢◤ \n" +
                                                    "   █▄ █ █▄ ███▀▀▀▀▀▀▀╬ \n" +
                                                    "   ◥█████◤ \n" +
                                                    "   ══╩══╩═ \n" +
                                                    "   ╬═╬ \n" +
                                                    "   ╬═╬ \n" +
                                                    "   ╬═╬ \n" +
                                                    "   ╬═╬ \n" +
                                                    "   ╬═╬☻/\n" +
                                                    "   ╬═╬/▌\n" +
                                                    "   ╬═╬//\n\n\n");

                                System.out.println("**********                                 **********");
                                System.out.println("**********            피신 성공             **********");
                                System.out.println("**********             E N D               **********");
                                System.out.println("**********                                 **********\n\n\n");


                                System.out.println("계속 하시려면 1번, 게임을 종료하시려면 0번을 누르세요.");
                                int 게임종료 = 입력값.nextInt();

                                if (게임종료 == 1) {
                                    // 반복문 계속
                                } else if (게임종료 == 0){
                                    System.out.println("게임을 종료합니다.");
                                    System.exit(0);


                                }


                                break;

                            } else {

                                System.out.println("부품 갯수가 부족합니다.\n");
                                System.out.println( "╔════════════════════════╗\n\n" +

                                                    "     < 통신장치 레시피 >\n\n" +

                                                    "        배터리"+부품1.갯수+"/1개\n" +
                                                    "        라디오"+부품2.갯수+"/1개\n" +
                                                    "        마이크"+부품3.갯수+"/1개\n\n" +

                                                    "╚════════════════════════╝"
                                );   // 퀘스트 : 부품모아

                            }
                        }





                    // 0. 이전
                    } else if (당신의선택_상점123 == 0) {
                       //탈출
                        break;
                        // 123 이외 입력시 반복문 탈출못함(break못씀)
                    } else {
                        System.out.println("다시 선택하세요.");
                    }


                }//~while  빠져나오면 1.구입  2.판매  3.조합하기 나옴


            // 4. 인벤토리
            } else if (당신의선택 == 4) {

                System.out.println("================ 인 벤 토 리 ===============\n");

                // 갯수가 1이상일 때만 출력
                if (부품1.갯수 >= 1) {
                    아이템들.인벤아이템(부품1.품명,부품1.가격,부품1.갯수);
                } if (부품2.갯수 >= 1) {
                    아이템들.인벤아이템(부품2.품명,부품2.가격,부품2.갯수);
                } if (부품3.갯수 >= 1) {
                    아이템들.인벤아이템(부품3.품명,부품3.가격,부품3.갯수);
                } if (오렌지살점.갯수 >= 1) {
                    아이템들.인벤아이템(오렌지살점.품명,0,오렌지살점.갯수);
                } if (짜장면살점.갯수 >= 1) {
                    아이템들.인벤아이템(짜장면살점.품명,0,짜장면살점.갯수);
                } if (먹물살점.갯수 >= 1) {
                    아이템들.인벤아이템(먹물살점.품명,0,먹물살점.갯수);
                }
                System.out.println( "\n\n" +
                                    "╔══════════════════════╗\n" +
                                    "        현재 소지금      \n" +
                                    "         "+생존자설정값.소지골드+"원\n"+
                                    "╚══════════════════════╝");
                System.out.println("=========================================\n");


                // 5. 퀘스트
            } else if (당신의선택 == 5) {

                System.out.println( "╔════════════════════════╗\n\n" +

                                    "       < 퀘 스 트 >\n" +
                                    "    통신 장치 부품 구매   \n\n" +

                                    "        배터리"+부품1.갯수+"/2개\n" +
                                    "        라디오"+부품2.갯수+"/1개\n" +
                                    "        마이크"+부품3.갯수+"/1개\n\n" +

                                    "╚════════════════════════╝"
                );   // 퀘스트 : 부품모아

                System.out.println("                  (0.이전)");

                int 퀘스트이전 = 입력값.nextInt();

                if (퀘스트이전 == 0) {

                } else {
                    System.out.println("다시 선택하세요.");
                }

            }else {
                System.out.println("다시 선택하세요.");
                System.out.println("1.사냥\n2.상태창\n3.상점\n4.인벤토리");
            } // 선택n 끝나면 12345선택지 나옴


            System.out.println("1.사냥\n2.상태창\n3.상점\n4.인벤토리\n5.퀘스트 ^^\n");


        }  //~while "1.사냥  2.상태창  3.상점  4.인벤토리  5.퀘스트










        //필드
        //생성자
        //메소드

    }

}
*/